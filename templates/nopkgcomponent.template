package {{PKGNAME}}

import (
	"github.com/gu-io/gu"
	"github.com/gu-io/gu/trees"
	"github.com/gu-io/gu/trees/elems"
	"github.com/gu-io/gu/trees/property"
)

// RegisterComponent adds the giving component into the provied registry for instanciation.
func RegisterComponent(registry *gu.ComponentRegistry) {
	registry.Register("{{Name_Lower}}", func(attr map[string]string, template string) gu.Renderable {
		return New{{Name}}()
	}, false)
}

// {{Name}} defines a component which implements the gu.Renderable interface.
type {{Name}} struct{
	gu.Reactive
	Services gu.Services
}

// New{{Name}} returns a new instance of {{Name}} component.
func New{{Name}}() *{{Name}} {
  return &{{Name}}{
  	Reactive: gu.NewReactive(),
  }
}

// New{{Name}}WithService returns a new instance of {{Name}} component provided the given Services object.
func New{{Name}}WithService(services gu.Services) *{{Name}} {
  return &{{Name}}{
  	Services: services,
  	Reactive: gu.NewReactive(),
  }
}

// RegisterServices is created so that the Services struct which contains 
// objects that provide different functionality to the component can be 
// recieved and accessed by the component.
func ({{Name_Lower_Id}} *{{Name}}) RegisterServices(services gu.Services)  {
	{{Name_Lower_Id}}.Services = services
}

// Render returns the markup for this {{Name}} component.
func ({{Name_Lower_Id}} {{Name}}) Render() *trees.Markup {
	return elems.Div(property.ClassAttr("component","{{Name_Lower}}"))
}

// Apply adds the giving components Render() result to the 
// provided root.
func ({{Name_Lower_Id}} {{Name}}) Apply(root *trees.Markup)  {
	root.AddChild({{Name_Lower_Id}}.Render())
}