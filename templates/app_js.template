// Package main generates the gopherjs output for the app into the assets directory of this app.

//go:generate go generate ./components/...
//go:generate go generate ./manifests/...
//go:generate go get github.com/gopherjs/gopherjs
//go generate go install {{GOPATH}}/github.com/gopherjs/gopherjs/...
//go:generate gopherjs build -o assets/{{Name}}.js

package main

import (
	"net/http"
	
	"github.com/gu-io/gu"
	"github.com/gu-io/gu/router"
	"github.com/gu-io/gu/router/cache"
	"github.com/gu-io/gopherjs"
	"{{PKG}}/manifests"
	"{{PKG}}/components"
)

// EmptyServer is structure you should replace, this allows you to serve requests
// to the app whether from the backend or the frontend. If on the backend, you could
// supply the structure that implements your http.Handler or something similar to
// route requests and respond. If on the frontend, you can either create something to
// service requests offline or connects to the frontend and makes the requests, returning
// the response.
type EmptyServer struct{}

// ServeHTTP services all http request coming in and responds accordingly.
// See https://github.com/gu-io/gu/router for more.
func (EmptyServer) ServeHTTP(w http.ResponseWriter, r *http.Request){

}


func main() {

	var server EmptyServer

	var cache cache.Cache

	cache, err := webcache.New("{{Name}}")
	if err != nil {
		cache = localcache.New("{{Name}}")
	}

	router := router.NewRouter(server, cache)

	app := gu.App(gu.AppAttr{
		Name:              "{{Name}}",
		Title:             "{{Name}} App",
		Manifests:         manifests.Manifests,
		Router: 		   router,
		Theme:			   components.Theme,
	})

	// Must be done before attempting to add any view
	_ = gopherjs.NewJSDriver(app)
}
