// +build ignore

// Generates the manifests.go package file.

//go:generate go run generate.go

package main

import (
	"encoding/json"
	"fmt"
	"bytes"
	"os"
	"path/filepath"
	"strings"

	"github.com/gu-io/gu/shell"
	"github.com/gu-io/gu/shell/parse"
)

var pkg = {{SOURCE}}

func main() {
	cdir, err := os.Getwd()
	if err != nil {
		panic(err)
	}

	manifestDir := filepath.Join(cdir, "../manifests")
	componentDir := filepath.Join(cdir, "../components")

	res, err := parse.ShellResources(componentDir)
	if err != nil {
		panic(err)
	}

	var manifests []shell.AppManifest

	for _, rs := range res {
		ms, terr := rs.GenManifests()
		if terr != nil {
			panic(terr)
		}

		manifests = append(manifests, *ms)
	}

	file, err := os.Create(filepath.Join(manifestDir, "manifests.go"))
	if err != nil {
		panic("Failed to create manifest pkg file: " + err.Error())
	}

	defer file.Close()

	maniJSON, terr := json.MarshalIndent(manifests, "", "\t")
	if terr != nil {
		panic("Failed to create manifest json: " + terr.Error())
	}

	if len(maniJSON) == 0 || bytes.Equal(maniJSON,[]byte("null")){
		maniJSON = []byte("[]")
	}

	maniJSONQuoted := fmt.Sprintf("%+q", maniJSON)
	pkg = strings.Replace(pkg, "{{PKG}}", "manifests", -1)
	pkg = strings.Replace(pkg, "{{MANIFEST}}", maniJSONQuoted, -1)

	file.Write([]byte(pkg))
}
