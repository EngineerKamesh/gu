// +build ignore

package main

import (
	"bytes"
	"fmt"
	"os"
	"strings"
	"path/filepath"

	"github.com/gu-io/gu/parsers/cssparser"
)

var pkgName = {{PKGNAME}}
var pkg = {{PKG_CONTENT}}
var cssPart = `
	
	rules = append(rules, cssstyle{
		Style: %q,
		Path: %q,
		After: %s,
		Before: %s,
	})

`

func main() {
	items, err := cssparser.ParseDir(filepath.Join("./", "{{DIRNAME}}"))
	if err != nil {
		panic("Failed to walk CSS directories: "+ err.Error())
	}

	var bu bytes.Buffer

	for _, item := range items.Generate() {
		var afterBu, beforeBu bytes.Buffer

		if after, ok := item["after"].([]int); ok {
			afterBu.WriteString("[]int{")

			for _, ai := range after {
				fmt.Fprintf(&afterBu, "%d", ai)
				fmt.Fprintf(&afterBu, ",")
			}

			afterBu.WriteString("}")
		}

		if before, ok := item["before"].([]int); ok {
			beforeBu.WriteString("[]int{")

			for _, ai := range before {
				fmt.Fprintf(&beforeBu, "%d", ai)
				fmt.Fprintf(&beforeBu, ",")
			}

			beforeBu.WriteString("}")
		}

		fmt.Fprintf(&bu, cssPart, item["style"], item["path"], afterBu.String(), beforeBu.String())
	}

	file, err := os.Create(filepath.Join("./", "css.go"))
	if err != nil {
		panic("Failed to create css pkg file: " + err.Error())
	}

	defer file.Close()

	pkg = strings.Replace(pkg, "{{PKG}}", pkgName, -1)
	pkg = strings.Replace(pkg, "{{STYLES}}", bu.String(), -1)
	
	file.Write([]byte(pkg))
}