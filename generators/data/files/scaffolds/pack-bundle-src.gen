
import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"sync"
	"path/filepath"
	"time"
)

type fileData struct{
  path string
  root string
  data []byte
}

var (
  assets = map[string][]string{
    {{ range $ext, $directives := .Directives }}
      {{ quote $ext}}: []string{  // all {{ $ext }} assets.
        {{ range $directives }}
          {{quote .OriginPath}},
        {{ end }}
      },
    {{ end }}
  }

  assetFiles = map[string]fileData{
    {{ range $ext, $directives := .Directives }}
      {{ range $directives }}
        {{quote .OriginPath}}: { // all {{ $ext }} assets.
          data: []byte({{ .Read }}),
          path: {{quote .OriginPath }},
          root: {{quote .OriginAbsPath }},
        },
      {{ end }}
    {{ end}}
  }

	assetsCache = struct{
		ml sync.RWMutex
		cache map[string]string
	}{
		cache: make(map[string]string, 0),
	}
)

//==============================================================================

// FilesFor returns all files that use the provided extension, returning a
// empty/nil slice if none is found.
func FilesFor(ext string) []string {
  return assets[ext]
}

// MustFindFile calls FindFile to retrieve file reader with path else panics.
func MustFindFile(path string, doGzip bool) io.Reader {
  reader, err := FindFile(path, doGzip)
  if err != nil {
    panic(err)
  }

  return reader
}

// FindFile returns a io.Reader by seeking the giving file path if it exists.
func FindFile(path string, doGzip bool) (io.Reader, error){
	assetsCache.ml.RLock()
	if data, ok := assetsCache.cache[path]; ok {
		assetsCache.ml.RUnlock()
		return bytes.NewBufferString(data), nil
	}
	assetsCache.ml.RUnlock()

  item, ok := assetFiles[path]
  if !ok {
    return nil, fmt.Errorf("File %q not found in file system", path)
  }

  if !doGzip {
    return bytes.NewReader(item.data), nil
  }

  return gzip.NewReader(bytes.NewReader(item.data))
}

// MustReadFile calls ReadFile to retrieve file content with path else panics.
func MustReadFile(path string, doGzip bool) []byte {
  body, err := ReadFile(path, doGzip)
  if err != nil {
    panic(err)
  }

  return body
}

// ReadFile attempts to return the underline data associated with the given path
// if it exists else returns an error.
func ReadFile(path string, doGzip bool) ([]byte, error){
	assetsCache.ml.RLock()
	if data, ok := assetsCache.cache[path]; ok {
		assetsCache.ml.RUnlock()
		return []byte(data), nil
	}
	assetsCache.ml.RUnlock()

  reader, err := FindFile(path, doGzip)
  if err != nil {
    return nil, err
  }

  var bu bytes.Buffer

  if _, err := io.Copy(&bu, reader); err != nil && err != io.EOF{
    return nil, err
  }

	assetsCache.ml.Lock()
	assetsCache.cache[path] = string(bu.Bytes())
	assetsCache.ml.Unlock()

  return bu.Bytes(), nil
}
